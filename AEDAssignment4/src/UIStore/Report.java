/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIStore;

import Business.Inventory;
import Business.InventoryItem;
import java.awt.Color;
import javax.swing.JPanel;
import Business.Store;
import java.awt.CardLayout;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
/**
 *
 * @author priyank
 */
public class Report extends javax.swing.JPanel {

    /**
     * Creates new form Report
     */
    private Store store;
    private JPanel userProcessContainer;
    ArrayList<Object> sections = new ArrayList <Object>();
    public Report(JPanel upc,Store s) {
        initComponents();
        this.store=s;
        this.userProcessContainer=upc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStore = new javax.swing.JLabel();
        btnTop = new javax.swing.JButton();
        btnShort = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        lblStore.setText("jLabel1");

        btnTop.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTop.setText("Top 5 Profit Product >>");
        btnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopActionPerformed(evt);
            }
        });

        btnShort.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnShort.setText("Item in Shortage >>");
        btnShort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShortActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lblStore))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnShort, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTop)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblStore)
                .addGap(53, 53, 53)
                .addComponent(btnTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(44, 44, 44)
                .addComponent(btnShort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addComponent(btnBack)
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopActionPerformed
        // TODO add your handling code here:
         populateChart(store);
    }//GEN-LAST:event_btnTopActionPerformed

    private void btnShortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShortActionPerformed
        // TODO add your handling code here:
        
        ShortagePanel mpcjp = new ShortagePanel(userProcessContainer, store);
        userProcessContainer.add("ShortagePanel", mpcjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_btnShortActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

private  CategoryDataset createDataset(){
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
           int j;
int k;
       Inventory I = store.getInventory();
     
       for ( k = 0; k < I.getInventoryItemList().size()-1; k++)
 {

            for( j=k+1;  j < I.getInventoryItemList().size() ; j++ )
            {
                   if ( I.getInventoryItemList().get(k).getProfit() < I.getInventoryItemList().get(j).getProfit() )   
                   {
                           InventoryItem invI = new InventoryItem();
      invI = I.getInventoryItemList().get(k);  
            		   I.getInventoryItemList().set(k, I.getInventoryItemList().get(j)) ;
                          I.getInventoryItemList().set(j, invI) ;
			   
                     
                                 
                  } 
           
     

}
 }
       int count=0;
        for (InventoryItem ii : I.getInventoryItemList()){
       if (count<5){
       
        

         //  int countM = Integer.parseInt(mm);
         
           
             dataset.addValue(ii.getProfit(),store.getStoreName(),ii.getProduct().getProdName());  
           count++;
       }
       else{
            return dataset;
       }
         
    }
       
         return dataset;
}





   

public void populateChart(Store store){
    
    CategoryDataset dataset = createDataset();
    JFreeChart chart = createChart(dataset);

ChartFrame frame = new ChartFrame("Graph", chart);
frame.pack();
frame.setVisible(true);
}

private static JFreeChart createChart(CategoryDataset dataset) {
    JFreeChart chart = ChartFactory.createBarChart("BAR Chart", null, null, dataset, PlotOrientation.HORIZONTAL, true, true, true);
     //   JFreeChart chart = ChartFactory.createLineChart(
       //    "Line Chart", null /* x-axis label*/, 
        //        "Range" /* y-axis label */, dataset);
        chart.addSubtitle(new TextTitle(" Its is generated to show Top Profitable " 
                ));
        chart.setBackgroundPaint(Color.white);
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
org.jfree.chart.axis.NumberAxis rangeAxis = (org.jfree.chart.axis.NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(org.jfree.chart.axis.NumberAxis.createIntegerTickUnits());
      //  Line renderer = (BarRenderer) plot.getRenderer();
      //  renderer.setDrawBarOutline(false);
  //  LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer(); 
//renderer.setItemMargin(3); 
//renderer.setItemLabelsVisible(true);
        chart.getLegend().setFrame(BlockBorder.NONE);
        return chart;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnShort;
    private javax.swing.JButton btnTop;
    private javax.swing.JLabel lblStore;
    // End of variables declaration//GEN-END:variables
}

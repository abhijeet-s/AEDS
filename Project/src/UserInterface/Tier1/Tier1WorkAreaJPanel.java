/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Tier1;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.Tier1Organization;
import Business.Organization.Tier2Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.TierHelpDesk;
import Business.WorkQueue.WorkRequest;
import UserInterface.ThreatProcess.ThreatProcess;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Abhijeet
 */
public class Tier1WorkAreaJPanel extends javax.swing.JPanel {
 private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Tier1Organization tier1Organization;
    /**
     * Creates new form Tier1WorkAreaJPanel
     */
    public Tier1WorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Tier1Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.tier1Organization = (Tier1Organization)organization;
        populateTable();
    }
public void populateTable(){
        String allStatus = cbAll.getSelectedItem().toString();
    String myStatus = cbMy.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        DefaultTableModel myModel = (DefaultTableModel)myWorkRequestJTable.getModel();
        model.setRowCount(0);
         myModel.setRowCount(0);
        for(WorkRequest request : tier1Organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getPerson().getFirstName();
            
            row[2] =  ((TierHelpDesk) request).getThreatDetails().getPriority();
            row[3] =  ((TierHelpDesk) request).getThreatDetails().getSeverity();
            
            
         int reciever =   request.getReceiver() == null ? 0 : request.getReceiver().getPerson().getSSN();
            if(userAccount.getPerson().getSSN() == reciever)
           {
               if (myStatus == "All")
               {
                myModel.addRow(row);
                 System.out.println(request.getStatus().toString());
               }
                else if(myStatus == "Close"  && request.getStatus().equals(myStatus))
                        {
                        myModel.addRow(row);
                        }
           else if(myStatus == "Assigned" && request.getStatus().equals(myStatus) )
                        {
                            myModel.addRow(row);
                        
                        }
               else if(myStatus == "InProgress" && request.getStatus().equals(myStatus) )
                        {
                            myModel.addRow(row);
                        
                        }
           }

               if (allStatus == "All")
               {
                model.addRow(row);
                System.out.println(request.getStatus().toString());
               }
                else if(allStatus == "Close"  && request.getStatus().equals(allStatus))
                        {
                        model.addRow(row);
                        }
           else if(allStatus == "Open" && request.getStatus().equals(allStatus) )
                        {
                            model.addRow(row);
                        
                        }
                
                      
        }
        
       
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        myWorkRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        btnEscalate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbAll = new javax.swing.JComboBox<>();
        cbMy = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        myWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Priority", "Severity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(myWorkRequestJTable);

        assignJButton.setText("Assign to me >>");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        btnEscalate.setText("Escalate");
        btnEscalate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscalateActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Priority", "Severity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);

        jLabel1.setText("My Incident");

        cbAll.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Open", "Close", "All" }));
        cbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAllActionPerformed(evt);
            }
        });

        cbMy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Assigned", "InProgress", "Close", "All" }));
        cbMy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMyActionPerformed(evt);
            }
        });

        jLabel2.setText("All Incident");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(631, 631, 631)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEscalate, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(processJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(41, 41, 41)
                        .addComponent(cbAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(refreshJButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(61, 61, 61)
                        .addComponent(cbMy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(refreshJButton)
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(assignJButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(btnEscalate)
                .addGap(34, 34, 34)
                .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

         if (selectedRow < 0){
            
           JOptionPane.showMessageDialog(null, "Please Select a row.");
           return ;
        }

        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equals("Open")){
            request.setReceiver(userAccount);
            request.setReceiver(userAccount);
        request.setStatus("Assigned");
        populateTable();
            return ;
        }
        else
        {
        JOptionPane.showMessageDialog(null, "Selected request is eigther closed or assigned to someone else");
        }
        

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = myWorkRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a row");
            return;
        }

        TierHelpDesk  request = (TierHelpDesk)myWorkRequestJTable.getValueAt(selectedRow, 0);
       

        request.setStatus("InProgress");

        ThreatProcess threatProcess = new ThreatProcess(userProcessContainer,request,1,enterprise);
        userProcessContainer.add("ThreatProcess1", threatProcess);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnEscalateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscalateActionPerformed
        // TODO add your handling code here:
        int selectedRow = myWorkRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a row");
            return;
        }
       
        
        
         
          Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof Tier2Organization){
                org = organization;
                  
                break;
            }
        }
        if (org!=null){
              TierHelpDesk  request = (TierHelpDesk)myWorkRequestJTable.getValueAt(selectedRow, 0);
            request.setReceiver(null);
         request.setSender(userAccount);
            request.setStatus("Open");
            org.getWorkQueue().getWorkRequestList().add(request);
            tier1Organization.getWorkQueue().getWorkRequestList().remove(request);
           // userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No tier 2 organization found");
            return;
        }
         populateTable();
        
    }//GEN-LAST:event_btnEscalateActionPerformed

    private void cbMyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMyActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_cbMyActionPerformed

    private void cbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAllActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_cbAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnEscalate;
    private javax.swing.JComboBox<String> cbAll;
    private javax.swing.JComboBox<String> cbMy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable myWorkRequestJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
